import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get aboutUs => "About Us";
  String get applicationName => "AiTour";
  String get calculating => "Calculating, please wait...";
  String get cancelButtonLabel => "CANCEL";
  String get close => "Close";
  String get comments => "Comments";
  String get donate => "Donate";
  String get downloading => "Downloading, please wait...";
  String get error => "Error";
  String get favorite => "Favorites";
  String get loadingModel => "loading modal...";
  String get okButtonLabel => "OK";
  String get predictError => "Predict error";
  String get predictMethod => "Predict Method";
  String get predictMethodImages => "Pick picture from gallery";
  String get predictMethodLive => "Live";
  String get predictMethodTakePhoto => "Take Photo";
  String get predictNoMatch => "Can't recognize it";
  String get predictResult => "Predict result";
  String get preferedLanguage => "Language";
  String get settings => "Settings";
  String get settingsGeneral => "General";
  String get settingsPredict => "Predict";
  String get signIn => "Sign in";
  String get signInWith => "Login Width";
  String get signOut => "Sign out";
  String get signUp => "Sign up";
  String get tabHome => "Home";
  String get tabOpen => "Open";
  String get tabProfile => "Profile";
  String get tabTour => "Tour";
  String get takePhoto => "Take Photo";
  String get takePhotoAndPredict => "Take Photo And Recognize it";
  String get threshold => "threshold";
  String get topK => "topK";
  String get welcome => "Welcome";
}

class $zh_TW extends S {
  const $zh_TW();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get aboutUs => "關於我們";
  @override
  String get settingsPredict => "識別";
  @override
  String get predictMethodImages => "圖片庫選取";
  @override
  String get threshold => "閾值";
  @override
  String get error => "錯誤";
  @override
  String get predictNoMatch => "未找到可以識別的目標";
  @override
  String get predictMethodTakePhoto => "拍照";
  @override
  String get signUp => "註冊";
  @override
  String get predictResult => "識別结果";
  @override
  String get cancelButtonLabel => "取消";
  @override
  String get downloading => "下載中, 請稍侯...";
  @override
  String get donate => "捐贈";
  @override
  String get tabOpen => "開放";
  @override
  String get welcome => "歡迎";
  @override
  String get close => "關閉";
  @override
  String get applicationName => "AiTour";
  @override
  String get okButtonLabel => "確認";
  @override
  String get topK => "topK";
  @override
  String get settings => "設置";
  @override
  String get comments => "評論";
  @override
  String get predictMethod => "模式";
  @override
  String get predictMethodLive => "掃描";
  @override
  String get tabTour => "向導";
  @override
  String get settingsGeneral => "通用";
  @override
  String get signOut => "退出";
  @override
  String get calculating => "計算中，請稍候...";
  @override
  String get loadingModel => "模型加載中...";
  @override
  String get takePhoto => "拍照";
  @override
  String get takePhotoAndPredict => "拍照識別";
  @override
  String get preferedLanguage => "語言";
  @override
  String get predictError => "識別錯誤";
  @override
  String get tabHome => "主頁";
  @override
  String get signInWith => "使用以下方式登陸";
  @override
  String get signIn => "登錄";
  @override
  String get tabProfile => "我的";
  @override
  String get favorite => "收藏";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get aboutUs => "关于我们";
  @override
  String get settingsPredict => "识别";
  @override
  String get predictMethodImages => "图片库选取";
  @override
  String get threshold => "阈值";
  @override
  String get error => "错误";
  @override
  String get predictNoMatch => "未找到可以识别的目标";
  @override
  String get predictMethodTakePhoto => "拍照";
  @override
  String get signUp => "注册";
  @override
  String get predictResult => "识别结果";
  @override
  String get cancelButtonLabel => "取消";
  @override
  String get downloading => "下载中, 请稍侯...";
  @override
  String get donate => "捐赠";
  @override
  String get tabOpen => "开放";
  @override
  String get welcome => "欢迎";
  @override
  String get close => "关闭";
  @override
  String get applicationName => "AiTour";
  @override
  String get okButtonLabel => "确认";
  @override
  String get topK => "topK";
  @override
  String get settings => "设置";
  @override
  String get comments => "评论";
  @override
  String get predictMethod => "模式";
  @override
  String get predictMethodLive => "扫描";
  @override
  String get tabTour => "向导";
  @override
  String get settingsGeneral => "通用";
  @override
  String get signOut => "退出";
  @override
  String get calculating => "计算中, 请稍候...";
  @override
  String get loadingModel => "模型加载中...";
  @override
  String get takePhoto => "拍照";
  @override
  String get takePhotoAndPredict => "拍照识别";
  @override
  String get preferedLanguage => "语言";
  @override
  String get predictError => "识别错误";
  @override
  String get tabHome => "主页";
  @override
  String get signInWith => "使用以下方式登陆";
  @override
  String get signIn => "登陆";
  @override
  String get tabProfile => "我的";
  @override
  String get favorite => "收藏";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("zh", "TW"),
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "zh_TW":
          return SynchronousFuture<S>(const $zh_TW());
        case "en":
          return SynchronousFuture<S>(const $en());
        case "zh_CN":
          return SynchronousFuture<S>(const $zh_CN());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
